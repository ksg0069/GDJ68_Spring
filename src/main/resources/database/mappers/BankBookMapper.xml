<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.iu.main.bankBook.BankBookDAO"> <!-- dao의 클래스명으로 적음 풀패키지명으로 적음, 마음대로 적어도 됨 --> 
  
  <!-- Comment -->
  	<select id="getCommentTotal" resultType="Long" parameterType="BookCommentDTO">
  		SELECT COUNT(COMMENTNUM) FROM BOOKCOMMENT
  		WHERE BOOKNUM = #{bookNum}
  	</select>
  	
  	<select id="getCommentList" resultType="BookCommentDTO" parameterType="Map">
  		SELECT * FROM 
  		(SELECT ROWNUM R, C.* FROM
  		(SELECT * FROM BOOKCOMMENT
  		 WHERE BOOKNUM=#{comment.bookNum} 	
  		 ORDER BY COMMENTNUM DESC)C)
  		WHERE R BETWEEN #{pager.startRow} AND #{pager.lastRow}
  	</select>
    
  <!-- BANKBOOK -->
  	<sql id="searchSql">
  		<choose>
				<when test="kind == 'name'">
				 AND BOOKNAME LIKE '%'||#{search}||'%'
				</when>
				<otherwise>
				 AND BOOKCONTENTS LIKE '%'||#{search}||'%'
				</otherwise>	
			</choose>
  	</sql>
  	
  	 <select id="getTotal" resultType="Long" parameterType="Pager">
  	 	SELECT COUNT(BOOKNUM) FROM BANKBOOK
  	 	WHERE BOOKNUM >0
  	 	<include refid="searchSql"/>
		
  	 </select>
  	 
  	 <select id="getList" parameterType="Pager" resultType="BankBookDTO"> <!-- arrayList에서는 set이없으므로 dto를 써야함 -->
		 SELECT BOOKNUM,BOOKNAME,BOOKRATE,BOOKSALE FROM
			(SELECT ROWNUM R, B.* FROM
				(
					SELECT * FROM BANKBOOK
					WHERE BOOKNUM >0
					<include refid="searchSql"/>
						
						<!-- <if test="kind == 'name'">
							AND BOOKNAME LIKE '%검색어%'
						</if> 
						<if test="kind == 'contents'">
							AND BOOKCONTENTS LIKE '%검색어%'
						</if> -->
					ORDER BY BOOKNUM DESC
				) B
			)
		WHERE R BETWEEN #{startRow} AND #{lastRow} <!-- map은 key이름 보냄 -->
 	</select>
 	
 	<select id="getDetail" resultMap="getDetailResult" parameterType="BankBookDTO"> <!-- id=dao메서드명 -->
	 	SELECT B.*,BF.*
		FROM BANKBOOK B LEFT JOIN BANKFILE BF
			ON (B.BOOKNUM = BF.BOOKNUM)
		WHERE B.BOOKNUM=#{bookNum}  
 	</select>
 	
 	<resultMap type="BankBookDTO" id="getDetailResult">
 		<id column="BOOKNUM" property="bookNum"/>
 		<result column="BOOKNAME" property="bookName"/>
 		<result column="BOOKCONTENTS" property="bookContents"/>
 		<result column="BOOKRATE" property="bookRate"/>
 		<result column="BOOKSALE" property="bookSale"/>
 		
 		<collection property="fileDTOs" javaType="List" ofType="BankBookFileDTO"><!-- 1:n 일때 -->
 		
 		<id column="FILENUM" property="fileNum"/>
 		<result column="FILENAME" property="fileName"/>
 		<result column="ORIGINALNAME" property="originalName"/>
 		 </collection>
 	</resultMap>
 	

	
	<!-- 파일 업로드 -->
  	<insert id="setFileAdd" parameterType="BankBookFileDTO">
  		INSERT INTO BANKFILE VALUES(BF_SEQ.NEXTVAL,#{bookNum},#{fileName},#{originalName})
  	</insert>
  	
  	<!-- 	<select id="getSequence" resultType="Long">
		SELECT BANK_SEQ.NEXTVAL FROM DUAL
	</select> -->
  	
	<!-- add -->
 	<insert id="setAdd" parameterType="BankBookDTO">   <!-- insert는 result가 성공하면 0이상 실패하면 0이므로 resultType을 안써줘도된다 -->
 		<selectKey keyProperty="bookNum" resultType="Long" order="BEFORE"> <!-- BankBookDTO의 속성 -->
 			SELECT BANK_SEQ.NEXTVAL FROM DUAL
 		</selectKey> 
 		INSERT INTO BANKBOOK VALUES(#{bookNum},#{bookName},#{bookRate},#{bookSale},#{bookContents})
 	</insert>
 	
 	<update id="setUpdate" parameterType="BankBookDTO">
 		UPDATE BANKBOOK SET 
 		BOOKNAME=#{bookName},
 		BOOKRATE=#{bookRate},
 		BOOKSALE=#{bookSale},
 		BOOKCONTENTS=#{bookContents} 
 		WHERE BOOKNUM=#{bookNum}	
 	</update>
 	
 	<delete id="setDelete" parameterType="Long">
		DELETE BANKBOOK WHERE BOOKNUM = #{num}  	
 	</delete>
 	

 	

 	
 	
  </mapper>

